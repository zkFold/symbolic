{-# LANGUAGE DefaultSignatures    #-}
{-# LANGUAGE DeriveAnyClass       #-}
{-# LANGUAGE DerivingStrategies   #-}
{-# LANGUAGE OverloadedStrings    #-}
{-# LANGUAGE PolyKinds            #-}
{-# LANGUAGE TemplateHaskell      #-}
{-# LANGUAGE TypeFamilies         #-}
{-# LANGUAGE TypeOperators        #-}
{-# LANGUAGE UndecidableInstances #-}

module Main where

import           Data.ByteString                       (ByteString)
import           Prelude                               hiding (Fractional (..), Num (..), length)

import           ZkFold.Algebra.Class                  (zero)
import           ZkFold.Protocol.Plonkup.Prover.Secret
import           ZkFold.Symbolic.Examples.SmartWallet

main :: IO ()
main = do
    let setupBytes = mkSetup $ expModSetupMock @ByteString zero
        proofBytes = mkProof $ expModProofMock @ByteString zero (PlonkupProverSecret $ pure zero) 
            (ExpModProofInput 65537 23673913231282541353242445564026273690701173759133133571571622136811050263849828391867070149476010776580637901662538160801663305277123187687236717267615169702941008899631874298678699792342841313667764089963096592025459034821722013424225926560980239602375588148238453279063986426439851100140062506574072069782824460563914193433757797794493424257489159679997399470750027634273105502212420479414258479392228990405477591260025408004007566863724408205563254174405669731238346563068937093378247298089680649161522379835431584861000993050317794629253984945847536580571494216419224065157406907026754561745241879990640135658447 15358218904180934648405673726644278732352588744836591794632900653723225302603698716764669605252727662164878007164779430705547004262988178806484135583791073989959221537544828510241239431438950406710589883935678313797545201848462158146180732238340348362419636712230368975440110099919941318761742143777971596603586364086477587666902318314908250455309161827823266963523298345005002215572564170560722881609009897613805969497872502107290017963595834765810360052868653437842065060748469102519054723780867226155185922205214914165097805826859455384800484764429533696031300885228422448327138350913699758067237534975796896897496 24464116449458014217770767672345294494017742413790792589579601146869 
            )
    print $ encode (hash 28 mempty $ "asuhgvksjsklgvjhmslkdjh")
    print $ encode (hash 28 mempty $ "asuhgsdjkhskndjfjlacksdfhcieurhgvfnierugvhlcseirhgoijeasiuhfcsdgcfsnlkcjfngfvljhrgblkjshfgcljghkljmvhfglvkjhsldkfjgvhsldjfghvmskjhgvlvksjsklgvjhmslkdjh")
    print setupBytes
    print proofBytes
