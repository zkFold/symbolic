name: CI Pull Request

on:
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  on-main-pull-request:

    strategy:
      matrix:
        os: [ubuntu-latest]
        cabal: [3.14.2.0]
        ghc: [9.12.2]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Haskell
      uses: haskell-actions/setup@v2.6.2
      id: setup
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
        cabal-update: true

    - name: Configure Cabal
      run: |
        cabal update
        cabal configure --enable-tests --enable-benchmarks --enable-documentation

    - name: Generate cache key
      # Creates plan.json file
      run: |
        cabal build all --dry-run

    - name: Restore cached dependencies
      uses: actions/cache/restore@v4
      id: cache
      env:
        key: ${{ matrix.os }}-ghc-${{ matrix.ghc }}-cabal-${{ matrix.cabal }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}

    - name: Install dependencies
      # If we had an exact cache hit, the dependencies will be up to date.
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cabal build all --only-dependencies

    # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
    - name: Save cached dependencies
      uses: actions/cache/save@v4
      # If we had an exact cache hit, trying to save the cache would error because of key clash.
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}

    - name: Build
      run: |
        cabal build all -f Pedantic

    - name: Run symbolic-base-test (Algebra)
      run: ${{ format('cabal test symbolic-base-test --test-option="--match=symbolic-base-test{0} {1}"', ':', 'Algebra') }}
    
    - name: Run symbolic-base-test (Serialization)
      run: ${{ format('cabal test symbolic-base-test --test-option="--match=symbolic-base-test{0} {1}"', ':', 'Serialization') }}

    - name: Run symbolic-base-test (Protocols)
      run: ${{ format('cabal test symbolic-base-test --test-option="--match=symbolic-base-test{0} {1}"', ':', 'Protocols') }}

    - name: Run symbolic-base-test (Symbolic compiler)
      run: ${{ format('cabal test symbolic-base-test --test-option="--match=symbolic-base-test{0} {1}"', ':', 'Symbolic compiler') }}

    - name: Run symbolic-base-test (Symbolic data)
      run: ${{ format('cabal test symbolic-base-test --test-option="--match=symbolic-base-test{0} {1}"', ':', 'Symbolic data') }}

    - name: Run symbolic-base-test (Symbolic cryptography)
      run: ${{ format('cabal test symbolic-base-test --test-option="--match=symbolic-base-test{0} {1}"', ':', 'Symbolic cryptography') }}

    - name: Run other tests
      run: cabal test all --test-option="--skip=symbolic-base-test"

    - name: Compiler benchmark
      run: cabal bench compiler-golden-stats

    - name: Check cabal files
      run: |
        cd symbolic-base
        cabal check

        cd ../symbolic-examples
        cabal check

        cd ../symbolic-apps
        cabal check

        cd ../symbolic-ledger
        cabal check

        cd ../symbolic-cardano
        cabal check

        cd ../symbolic-uplc
        cabal check

        cd..

    - name: Document package
      run: cabal haddock all

    - name: Prepare package for publishing
      run: cabal sdist all

  stylish-haskell-job:
    strategy:
      matrix:
        os: [ubuntu-latest]
        cabal: [3.14.2.0]
        ghc: [9.10.1]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.1

    - name: Set up Haskell
      uses: haskell-actions/setup@v2.6.2
      id: setup
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
        cabal-update: true
    
    - name: Install stylish-haskell
      run: |
        cabal install stylish-haskell

    - name: Lint Haskell
      run: |
        find ./ -name "*.hs" -exec sh -c 'for file do if ! grep -q -E -r "javascript_HOST_ARCH|LANGUAGE CPP|type \(\*\)" "$file"; then stylish-haskell --inplace "$file"; fi; done' sh {} \;

    - name: Auto-commit lint
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: stylish-haskell auto-commit
        commit_user_name: GitHub Action
        commit_user_email: action@github.com
        branch: ${{ github.head_ref }}
