name: CI Push

on:
  push:
    branches: [ main ]

  workflow_dispatch:

permissions:
  contents: read

jobs:
  on-main-update:

    strategy:
      matrix:
        os: [ubuntu-latest]
        cabal: [3.14.2.0]
        ghc: [9.12.2]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Haskell
      uses: haskell-actions/setup@v2.6.2
      id: setup
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
        cabal-update: true

    - name: Configure Cabal
      run: |
        cabal update
        cabal configure --enable-tests --enable-benchmarks --enable-documentation

    - name: Generate cache key
      # Creates plan.json file
      run: |
        cabal build all --dry-run

    - name: Restore cached dependencies
      uses: actions/cache/restore@v4
      id: cache
      env:
        key: ${{ matrix.os }}-ghc-${{ matrix.ghc }}-cabal-${{ matrix.cabal }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}

    - name: Install dependencies
      # If we had an exact cache hit, the dependencies will be up to date.
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cabal build all --only-dependencies

    # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
    - name: Save cached dependencies
      uses: actions/cache/save@v4
      # If we had an exact cache hit, trying to save the cache would error because of key clash.
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}

    - name: Build
      run: |
        cabal build all -f Pedantic

    # TODO: Upload package and documentation to a Hackage server

    # - name: Upload package
    #   env:
    #     HACKAGE_PASSWORD: ${{ secrets.HACKAGE_PASSWORD }}
    #   shell: bash
    #   run: |
    #     cabal sdist symbolic-base
    #     cabal upload --username=VladimirSinyakov --password="$HACKAGE_PASSWORD" dist-newstyle/sdist/*.tar.gz

    # - name: Upload documentation
    #   env:
    #     HACKAGE_PASSWORD: ${{ secrets.HACKAGE_PASSWORD }}
    #   shell: bash
    #   run: |
    #     cabal v2-haddock symbolic-base --haddock-for-hackage --enable-doc
    #     cabal upload --documentation --username=VladimirSinyakov --password="$HACKAGE_PASSWORD" dist-newstyle/*-docs.tar.gz
