cabal-version:      3.0

name:               symbolic-base
version:            0.1.0.0
tested-with:        GHC == 9.12.1
synopsis:           ZkFold Symbolic compiler and zero-knowledge proof protocols
homepage:           https://zkfold.io/
category:           Cryptography, DSL, Math, Symbolic Computation
author:             Vladimir Sinyakov, Pavel Sokolov, Vladimir Morozov, Eitan Chatav, Ilya Baryshnikov, Anna Hovanskaya, Evgenii Samodelov, Murat Kasimov, Maxim Churilov
maintainer:         vlasin@zkfold.io
license:            MIT
license-file:       LICENSE
build-type:         Simple
Data-Files:
    test/data/shabittestvectors/*.rsp

description:
  This package contains the zkFold Symbolic framework base library. It includes the zkFold Symbolic compiler and a number of zero knowledge proof protocols.
  The compiler translates code written using the zkFold Symbolic framework into arithmetic circuits. The zero knowledge proof protocols are used to verify statements about the circuits.

Flag Pedantic
    Description: Enable pedantic build with -Werror
    Manual: True
    Default: False

common options
    default-language: Haskell2010
    ghc-options:
      -fwarn-redundant-constraints
      -Wall
      -Wcompat
      -Widentities
      -Wincomplete-record-updates
      -Wincomplete-uni-patterns
      -Wnoncanonical-monad-instances
      -Wpartial-fields
      -Wredundant-constraints
      -Wunused-packages
      -O2
    if !arch(wasm32)
      ghc-options:
        -threaded
    if impl(ghc >=9.8)
      ghc-options:
        -Wno-x-partial
    if flag(pedantic)
      ghc-options:
        -Werror
    default-extensions:
      BangPatterns,
      BinaryLiterals,
      ConstraintKinds,
      DataKinds,
      DefaultSignatures,
      DeriveDataTypeable,
      DeriveFoldable,
      DeriveFunctor,
      DeriveGeneric,
      DeriveTraversable,
      ExistentialQuantification,
      FlexibleContexts,
      FlexibleInstances,
      FunctionalDependencies,
      GADTs,
      GeneralizedNewtypeDeriving,
      InstanceSigs,
      KindSignatures,
      LambdaCase,
      MultiParamTypeClasses,
      MultiWayIf,
      NamedFieldPuns,
      NoImplicitPrelude,
      NoStarIsType,
      NumericUnderscores,
      OverloadedStrings,
      OverloadedLabels,
      PolyKinds,
      RankNTypes,
      RecordWildCards,
      ScopedTypeVariables,
      StandaloneDeriving,
      StandaloneKindSignatures,
      TupleSections,
      TypeApplications,
      TypeFamilies,
      ViewPatterns

common options-exe
    import: options
    ghc-options:
      -rtsopts
    ghc-prof-options:
      -with-rtsopts=-pj

library
    import: options
    exposed-modules:
      ZkFold.Algebra.Class
      ZkFold.Algebra.Field
      ZkFold.Algebra.Number
      ZkFold.Algebra.Permutation
      ZkFold.Algebra.DFT
      ZkFold.Algebra.VectorSpace
      ZkFold.Algebra.EllipticCurve.BLS12_381
      ZkFold.Algebra.EllipticCurve.BN254
      ZkFold.Algebra.EllipticCurve.Pasta
      ZkFold.Algebra.EllipticCurve.Class
      ZkFold.Algebra.EllipticCurve.Ed25519
      ZkFold.Algebra.EllipticCurve.Pairing
      ZkFold.Algebra.EllipticCurve.PlutoEris
      ZkFold.Algebra.EllipticCurve.Secp256k1
      ZkFold.Algebra.Polynomial.Multivariate
      ZkFold.Algebra.Polynomial.Multivariate.Groebner
      ZkFold.Algebra.Polynomial.Multivariate.Monomial
      ZkFold.Algebra.Polynomial.Multivariate.Internal
      ZkFold.Algebra.Polynomial.Multivariate.Substitution
      ZkFold.Algebra.Polynomial.Univariate
      ZkFold.Algebra.Polynomial.Univariate.Simple
      ZkFold.Algorithm.ReedSolomon
      ZkFold.Control.Conditional
      ZkFold.Control.HApplicative
      ZkFold.Data.Bool
      ZkFold.Data.ByteString
      ZkFold.Data.Empty
      ZkFold.Data.Eq
      ZkFold.Data.HFunctor
      ZkFold.Data.HFunctor.Classes
      ZkFold.Data.List.Infinite
      ZkFold.Data.Matrix
      ZkFold.Data.Orphans
      ZkFold.Data.Package
      ZkFold.Data.Product
      ZkFold.Data.Sparse.Matrix
      ZkFold.Data.Sparse.Vector
      ZkFold.Data.Type
      ZkFold.Data.Utils
      ZkFold.Data.Vector
      ZkFold.Protocol.IVC
      ZkFold.Protocol.IVC.Accumulator
      ZkFold.Protocol.IVC.AccumulatorScheme
      ZkFold.Protocol.IVC.AlgebraicMap
      ZkFold.Protocol.IVC.CommitOpen
      ZkFold.Protocol.IVC.Commit
      ZkFold.Protocol.IVC.FiatShamir
      ZkFold.Protocol.IVC.Internal
      ZkFold.Protocol.IVC.NARK
      ZkFold.Protocol.IVC.Oracle
      ZkFold.Protocol.IVC.Predicate
      ZkFold.Protocol.IVC.RecursiveFunction
      ZkFold.Protocol.IVC.SpecialSound
      ZkFold.Protocol.IVC.StepFunction
      ZkFold.Protocol.IVC.VerifierCircuit
      ZkFold.Protocol.KZG
      ZkFold.Protocol.Plonk
      ZkFold.Protocol.Plonk.Prover
      ZkFold.Protocol.Plonk.Verifier
      ZkFold.Protocol.Plonkup
      ZkFold.Protocol.Plonkup.LookupConstraint
      ZkFold.Protocol.Plonkup.PlonkConstraint
      ZkFold.Protocol.Plonkup.PlonkupConstraint
      ZkFold.Protocol.Plonkup.Input
      ZkFold.Protocol.Plonkup.Internal
      ZkFold.Protocol.Plonkup.Proof
      ZkFold.Protocol.Plonkup.Prover
      ZkFold.Protocol.Plonkup.Prover.Polynomials
      ZkFold.Protocol.Plonkup.Prover.Secret
      ZkFold.Protocol.Plonkup.Prover.Setup
      ZkFold.Protocol.Plonkup.Relation
      ZkFold.Protocol.Plonkup.Setup
      ZkFold.Protocol.Plonkup.Testing
      ZkFold.Protocol.Plonkup.Update
      ZkFold.Protocol.Plonkup.Utils
      ZkFold.Protocol.Plonkup.Verifier
      ZkFold.Protocol.Plonkup.Verifier.Commitments
      ZkFold.Protocol.Plonkup.Verifier.Setup
      ZkFold.Protocol.Plonkup.Witness
      ZkFold.Protocol.NonInteractiveProof
      ZkFold.Protocol.NonInteractiveProof.Class
      ZkFold.Protocol.NonInteractiveProof.Prover
      ZkFold.Protocol.NonInteractiveProof.Testing
      ZkFold.Prelude
      ZkFold.Symbolic.Algorithm.ECDSA.ECDSA
      ZkFold.Symbolic.Algorithm.Hash.Blake2b
      ZkFold.Symbolic.Algorithm.Hash.Blake2b.Constants
      ZkFold.Symbolic.Algorithm.Hash.Keccak
      ZkFold.Symbolic.Algorithm.Hash.Keccak.Constants
      ZkFold.Symbolic.Algorithm.Hash.MiMC
      ZkFold.Symbolic.Algorithm.Hash.MiMC.Constants
      ZkFold.Symbolic.Algorithm.Hash.SHA2
      ZkFold.Symbolic.Algorithm.Hash.SHA2.Constants
      ZkFold.Symbolic.Algorithm.Mithril
      ZkFold.Symbolic.Algorithm.RSA
      ZkFold.Symbolic.Algorithm.FFT
      ZkFold.Symbolic.Class
      ZkFold.Symbolic.Compiler
      ZkFold.Symbolic.Compiler.ArithmeticCircuit
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.Arbitrary
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.Context
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.Desugaring
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.Lookup
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.MerkleHash
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.Optimization
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.Var
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.Witness
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.WitnessEstimation
      ZkFold.Symbolic.Data.Bool
      ZkFold.Symbolic.Data.ByteString
      ZkFold.Symbolic.Data.Class
      ZkFold.Symbolic.Data.Combinators
      ZkFold.Symbolic.Data.Conditional
      ZkFold.Symbolic.Data.EllipticCurve.BLS12_381
      ZkFold.Symbolic.Data.EllipticCurve.BN254
      ZkFold.Symbolic.Data.EllipticCurve.Ed25519
      ZkFold.Symbolic.Data.EllipticCurve.Pasta
      ZkFold.Symbolic.Data.EllipticCurve.PlutoEris
      ZkFold.Symbolic.Data.EllipticCurve.Secp256k1
      ZkFold.Symbolic.Data.Eq
      ZkFold.Symbolic.Data.FFA
      ZkFold.Symbolic.Data.FieldElement
      ZkFold.Symbolic.Data.Hash
      ZkFold.Symbolic.Data.Input
      ZkFold.Symbolic.Data.Int
      ZkFold.Symbolic.Data.JWT
      ZkFold.Symbolic.Data.JWT.Google
      ZkFold.Symbolic.Data.JWT.RS256
      ZkFold.Symbolic.Data.JWT.Twitch
      ZkFold.Symbolic.Data.JWT.Utils
      ZkFold.Symbolic.Data.List
      ZkFold.Symbolic.Data.Maybe
      ZkFold.Symbolic.Data.MerkleTree
      ZkFold.Symbolic.Data.Morph
      ZkFold.Symbolic.Data.Ord
      ZkFold.Symbolic.Data.Payloaded
      ZkFold.Symbolic.Data.Switch
      ZkFold.Symbolic.Data.UInt
      ZkFold.Symbolic.Data.UTCTime
      ZkFold.Symbolic.Data.VarByteString
      ZkFold.Symbolic.Data.Vec
      ZkFold.Symbolic.Fold
      ZkFold.Symbolic.Interpreter
      ZkFold.Symbolic.MonadCircuit
    if arch(wasm32)
      exposed-modules:
        ZkFold.Protocol.NonInteractiveProof.WASM
    elif arch(javascript)
      exposed-modules:
        ZkFold.Protocol.NonInteractiveProof.JS
    else
      exposed-modules:
        ZkFold.Protocol.NonInteractiveProof.Haskell
    if arch(javascript) || arch(wasm32)
      js-sources:
        js-src/blake2b.js

    if arch(wasm32)
      build-depends:
        ghc-experimental
    if arch(javascript) || arch(wasm32)
      build-depends:
        base                          >= 4.9 && < 5,
        adjunctions                           < 4.5,
        aeson                               ^>= 2.2,
        aeson-casing                          < 0.3,
        base64-bytestring                          ,
        binary                               < 0.11,
        bifunctors                                 ,
        bytestring                           < 0.13,
        containers                                 ,
        constraints                                ,
        cryptohash-sha256                    < 0.12,
        deepseq                          <= 1.6.0.0,
        distributive                               ,
        generic-random                        < 1.6,
        infinite-list                              ,
        lens                                       ,
        monoidal-containers                        ,
        mtl                                   < 2.4,
        optics                                < 0.5,
        pretty-simple                         < 4.2,
        QuickCheck                           < 2.16,
        random                                < 1.3,
        scientific                            < 0.4,
        semialign                             < 1.4,
        semigroups                                 ,
        split                               < 0.2.6,
        text                                       ,
        these                                 < 1.3,
        transformers                               ,
        type-errors                         < 0.2.1,
        vector                               < 0.14,
        vector-binary-instances               < 0.3,
        vector-split                          < 1.1,
    else
      build-depends:
        base                          >= 4.9 && < 5,
        adjunctions                           < 4.5,
        aeson                               ^>= 2.2,
        aeson-casing                          < 0.3,
        base64-bytestring                          ,
        binary                               < 0.11,
        bifunctors                                 ,
        -- TODO: remove `blake2` after refactoring of ZK protocols
        blake2                                < 0.4,
        bytestring                           < 0.13,
        containers                                 ,
        constraints                                ,
        cryptohash-sha256                    < 0.12,
        deepseq                          <= 1.6.0.0,
        distributive                               ,
        generic-random                        < 1.6,
        infinite-list                              ,
        lens                                       ,
        monoidal-containers                        ,
        mtl                                   < 2.4,
        optics                                < 0.5,
        pretty-simple                         < 4.2,
        QuickCheck                           < 2.16,
        random                                < 1.3,
        scientific                            < 0.4,
        semialign                             < 1.4,
        semigroups                                 ,
        split                               < 0.2.6,
        text                                       ,
        these                                 < 1.3,
        transformers                               ,
        type-errors                         < 0.2.1,
        vector                               < 0.14,
        vector-binary-instances               < 0.3,
        vector-split                          < 1.1,
    hs-source-dirs: src

test-suite symbolic-base-test
    import: options-exe
    type: exitcode-stdio-1.0
    ghc-options: 
        -threaded
        "-with-rtsopts=-A128M -AL256m -qb0 -qn4 -N"
    main-is: Main.hs
    other-modules:
      Tests.Algebra.EllipticCurve
      Tests.Algebra.Field
      Tests.Algebra.GroebnerBasis
      Tests.Algebra.Group
      Tests.Algebra.Pairing
      Tests.Algebra.Permutation
      Tests.Algebra.ReedSolomon
      Tests.Algebra.Univariate
      Tests.Algebra.Univariate.Poly
      Tests.Algebra.Univariate.PolyVec
      Tests.Algebra.Univariate.Simple
      Tests.Data.Binary
      Tests.Protocol.IVC
      Tests.Protocol.NonInteractiveProof
      Tests.Protocol.Plonkup
      Tests.Protocol.Plonkup.Update
      Tests.Symbolic.Algorithm.Blake2b
      Tests.Symbolic.Algorithm.JWT
      Tests.Symbolic.Algorithm.Keccak
      Tests.Symbolic.Algorithm.RSA
      Tests.Symbolic.Algorithm.SHA2
      Tests.Symbolic.ArithmeticCircuit
      Tests.Symbolic.Compiler
      Tests.Symbolic.Compiler.CompileWith
      Tests.Symbolic.Compiler.Optimization
      Tests.Symbolic.Data.ByteString
      Tests.Symbolic.Data.Common
      Tests.Symbolic.Data.FFA
      Tests.Symbolic.Data.FieldElement
      Tests.Symbolic.Data.Hash
      Tests.Symbolic.Data.Int
      Tests.Symbolic.Data.List
      Tests.Symbolic.Data.MerkleTree
      Tests.Symbolic.Data.UInt
    build-depends:
      base                          >= 4.9 && < 5,
      adjunctions                           < 4.5,
      binary                               < 0.11,
      bytestring                                 ,
      blake2                                     ,
      constraints                                ,
      containers                                 ,
      deepseq                                    ,
      random                                < 1.3,
      directory                        <= 1.3.8.5,
      filepath                         <= 1.5.2.0,
      hspec                                < 2.12,
      QuickCheck                                 ,
      regex-tdfa                       <= 1.3.2.2,
      RSA                                   < 1.1,
      split                               < 0.2.6,
      symbolic-base                              ,
      transformers                               ,
      vector                                     ,
      vector-algorithms                          ,
      aeson
    hs-source-dirs: test

benchmark bench-poly-mul
    import:           options-exe
    main-is:          BenchPolyMul.hs
    hs-source-dirs:   bench
    type:             exitcode-stdio-1.0
    ghc-options:
      -O3
    build-depends:
      base,
      deepseq,
      random,
      symbolic-base,
      tasty-bench,
      vector,

benchmark bench-in-circuit-ec 
    import:           options-exe
    main-is:          BenchEC.hs
    hs-source-dirs:   bench
    type:             exitcode-stdio-1.0
    ghc-options:
      -O3
    build-depends:
      base,
      deepseq,
      tasty-bench,
      random,
      symbolic-base,

benchmark bench-lagrange-basis
    import:           options-exe
    main-is:          BenchLagrangeBasis.hs
    hs-source-dirs:   bench
    type:             exitcode-stdio-1.0
    ghc-options:
      -O3
    build-depends:
      base,
      deepseq,
      symbolic-base,
      tasty-bench,
      QuickCheck
